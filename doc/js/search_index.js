var search_data = {"index":{"searchIndex":["object","songkick","listingitem","listingitems","wegottickets","scraper","scrapers","wegottickets","spider","noscrapererror","spiders","wegottickets","utils","callbacks","add_url()","callback()","content()","date_time=()","delete_url()","export_json()","followed_url!()","items()","items()","new()","new()","new()","new()","new()","results()","run()","run()","run()","scraper()","scraper()","scrapers()","to_hash()","to_hash()","to_json()","to_json()","gemfile","rakefile"],"longSearchIndex":["object","songkick","songkick::listingitem","songkick::listingitems","songkick::listingitems::wegottickets","songkick::scraper","songkick::scrapers","songkick::scrapers::wegottickets","songkick::spider","songkick::spider::noscrapererror","songkick::spiders","songkick::spiders::wegottickets","songkick::utils","songkick::utils::callbacks","songkick::spider#add_url()","songkick::utils::callbacks#callback()","songkick::scraper#content()","songkick::listingitem#date_time=()","songkick::spider#delete_url()","songkick::scraper#export_json()","songkick::spider#followed_url!()","songkick::scraper#items()","songkick::scrapers::wegottickets#items()","songkick::listingitem::new()","songkick::listingitems::wegottickets::new()","songkick::scraper::new()","songkick::scrapers::wegottickets::new()","songkick::spider::new()","songkick::spider#results()","songkick::scraper#run()","songkick::scrapers::wegottickets#run()","songkick::spider#run()","songkick::spider#scraper()","songkick::spiders::wegottickets#scraper()","songkick::spider#scrapers()","songkick::listingitem#to_hash()","songkick::scraper#to_hash()","songkick::listingitem#to_json()","songkick::scraper#to_json()","",""],"info":[["Object","","Object.html","",""],["Songkick","","Songkick.html","",""],["Songkick::ListingItem","","Songkick/ListingItem.html","","<p>Listing Item used to hold information about and event Can be instancated\nwith attributes hash or by assigning …\n"],["Songkick::ListingItems","","Songkick/ListingItems.html","","<p>Module for all ListingItem subclasses\n"],["Songkick::ListingItems::WeGotTickets","","Songkick/ListingItems/WeGotTickets.html","","<p>Factor out the specific behaviour for creating a WeGotTickets ListingItem\n"],["Songkick::Scraper","","Songkick/Scraper.html","","<p>Scraper Base class Implement core features for a screen scraper. Accpets a\nurl and optionally a spider …\n"],["Songkick::Scrapers","","Songkick/Scrapers.html","","<p>Module for all Scraper subclasses\n"],["Songkick::Scrapers::WeGotTickets","","Songkick/Scrapers/WeGotTickets.html","","<p>Implementation of WeGotTickets screen scraper Parses the found items by\nselecting their CSS Clearly this …\n"],["Songkick::Spider","","Songkick/Spider.html","","<p>Spider implementation Initialize with a start_url Call #run to step through\nthe urls until complete  …\n"],["Songkick::Spider::NoScraperError","","Songkick/Spider/NoScraperError.html","","<p>Raise when no scraper was defined (so can’t process anything)\n"],["Songkick::Spiders","","Songkick/Spiders.html","",""],["Songkick::Spiders::WeGotTickets","","Songkick/Spiders/WeGotTickets.html","","<p>Spider implementation for WeGotTickets - just defining the scraper class\n"],["Songkick::Utils","","Songkick/Utils.html","",""],["Songkick::Utils::Callbacks","","Songkick/Utils/Callbacks.html","","<p>Module to add callback functionality to a class\n<p>coderrr.wordpress.com/2008/11/22/super-simple-callbacks-in-ruby/ …\n"],["add_url","Songkick::Spider","Songkick/Spider.html#method-i-add_url","(url)","<p>Add a url to the spider\n"],["callback","Songkick::Utils::Callbacks","Songkick/Utils/Callbacks.html#method-i-callback","(*names)","<p>Set up a callback of <em>name</em> on the class.\n<p>Define:\n\n<pre>callback :on_error</pre>\n"],["content","Songkick::Scraper","Songkick/Scraper.html#method-i-content","()","<p>Return the HTML content of the page\n"],["date_time=","Songkick::ListingItem","Songkick/ListingItem.html#method-i-date_time-3D","(date_time)","<p>Parse date time value to DateTime object TODO: This is going to need some\ncustom behavour to strip out …\n"],["delete_url","Songkick::Spider","Songkick/Spider.html#method-i-delete_url","(url)","<p>Remove an item from the\n"],["export_json","Songkick::Scraper","Songkick/Scraper.html#method-i-export_json","(filename)","<p>Write the JSON to disk\n"],["followed_url!","Songkick::Spider","Songkick/Spider.html#method-i-followed_url-21","(url)","<p>Call once you’ve followed the url, so we can remove it and log it\n"],["items","Songkick::Scraper","Songkick/Scraper.html#method-i-items","()","<p>Implement items in subclasses to provide functionality\n"],["items","Songkick::Scrapers::WeGotTickets","Songkick/Scrapers/WeGotTickets.html#method-i-items","()","<p>Set the items\n"],["new","Songkick::ListingItem","Songkick/ListingItem.html#method-c-new","(attributes={})","<p>Initialize by passing in a attributes hash\n"],["new","Songkick::ListingItems::WeGotTickets","Songkick/ListingItems/WeGotTickets.html#method-c-new","(item, scraper=nil)","<p>Initialize instead with an XML::ELement object\n"],["new","Songkick::Scraper","Songkick/Scraper.html#method-c-new","(url, spider=nil)","<p>Iniitialze the scraper passing in the start URL\n"],["new","Songkick::Scrapers::WeGotTickets","Songkick/Scrapers/WeGotTickets.html#method-c-new","(url, spider=nil)",""],["new","Songkick::Spider","Songkick/Spider.html#method-c-new","(start_url=nil)","<p>Create a spider with an optional initial url\n"],["results","Songkick::Spider","Songkick/Spider.html#method-i-results","()","<p>Get the results from all the scrapers and turn them into a giant hash\nClearly this kind ot technique …\n"],["run","Songkick::Scraper","Songkick/Scraper.html#method-i-run","()",""],["run","Songkick::Scrapers::WeGotTickets","Songkick/Scrapers/WeGotTickets.html#method-i-run","()",""],["run","Songkick::Spider","Songkick/Spider.html#method-i-run","()","<p>Loop over the scrapers, adding new URLs as we go.\n"],["scraper","Songkick::Spider","Songkick/Spider.html#method-i-scraper","()","<p>Interface definition for scraper.  Define in subclass e.g.\nSongkick::Scrapers::MyScraper\n"],["scraper","Songkick::Spiders::WeGotTickets","Songkick/Spiders/WeGotTickets.html#method-i-scraper","()",""],["scrapers","Songkick::Spider","Songkick/Spider.html#method-i-scrapers","()","<p>Array of already run scrapers\n"],["to_hash","Songkick::ListingItem","Songkick/ListingItem.html#method-i-to_hash","()","<p>Cast item to a hash\n"],["to_hash","Songkick::Scraper","Songkick/Scraper.html#method-i-to_hash","()","<p>Cast items to hash\n"],["to_json","Songkick::ListingItem","Songkick/ListingItem.html#method-i-to_json","()","<p>Cast item to a JSON string\n"],["to_json","Songkick::Scraper","Songkick/Scraper.html#method-i-to_json","()","<p>Cast to JSON string\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p>gem ‘activesupport’ gem ‘nokogiri’ gem ‘rdoc’ gem ‘json’ gem ‘reek’\n<p>group …\n"],["Rakefile","","Rakefile.html","","<p>require ‘reek/rake/task’\n<p>Reek::Rake::Task.new do |t|\n\n<pre>t.fail_on_error = false</pre>\n"]]}}